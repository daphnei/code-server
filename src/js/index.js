// Generated by CoffeeScript 1.7.1
(function() {
  var addImageOnDelay, app, data, db, express, fs, gen, imagesearch, numQuestions, otherData, populating, questionData;

  express = require('express');

  db = require('./db');

  gen = require('./question_gen');

  imagesearch = require('./imagesearch');

  fs = require('fs');

  app = express();

  populating = false;

  data = fs.readFileSync('./src/js/compare_questions.json');

  otherData = fs.readFileSync('./src/js/composition_questions.json');

  questionData = JSON.parse(data).concat(JSON.parse(otherData));

  numQuestions = questionData.length;

  app.get('/questions', function(req, res) {
    var limit, type, _ref;
    _ref = req.query, type = _ref.type, limit = _ref.limit;
    if (limit == null) {
      limit = 10;
    }
    limit = parseInt(limit);
    return db.getQuestions(type, limit).then(function(data) {
      return res.json(data);
    });
  });

  app.get('/questions/get/difficult', function(req, res) {
    var limit;
    limit = req.query.limit != null ? parseInt(req.query.limit) : 10;
    return db.getMostDifficultQuestions(limit, function(data) {
      return res.json(data);
    });
  });

  app.get('/questions/generate/random', function(req, res) {
    var count;
    count = req.query.count;
    return gen.generateRandomQuestionSet(count).then(function(data) {
      console.log(data);
      res.status(200);
      return res.send(data);
    });
  });

  app.get('/questions/generate', function(req, res) {
    var count, index, type;
    type = req.query.type;
    count = req.query.count != null ? parseInt(req.query.count) : 1;
    return index = req.query.index != null ? parseInt(req.query.index) : 1;
  });

  app.get('/questions/cached', function(req, res) {
    var count, i, index, questions, _i;
    count = req.query.count != null ? parseInt(req.query.count) : 1;
    questions = [];
    for (i = _i = 0; 0 <= count ? _i <= count : _i >= count; i = 0 <= count ? ++_i : --_i) {
      index = Math.floor(Math.random() * numQuestions);
      questions.push(questionData[index]);
    }
    return res.json(questions);
  });

  app.get('/image', function(req, res) {
    var keyword;
    keyword = req.query.keyword;
    return imagesearch.findImage(keyword).then(function(data) {
      res.status(200);
      return res.send(data);
    });
  });

  app.post('/answer', function(req, res) {
    var food1, food2, score, type, _ref;
    _ref = req.query, type = _ref.type, food1 = _ref.food1, food2 = _ref.food2, score = _ref.score;
    console.log(req.query);
    return db.createQuestionOrUpdateScore(type, food1, food2, score).then(function() {
      return res.send(200);
    })["catch"](function() {
      return res.send(422);
    });
  });

  addImageOnDelay = function(row, interval) {
    return setTimeout(function() {
      return db.addImageFor(row);
    }, interval);
  };

  app.get('/populate', function(req, res) {
    if (populating) {
      res.send(403);
    }
    populating = true;
    return db.getAllFoods().then(function(data) {
      var i, row, _i, _len;
      i = 0;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        row = data[_i];
        addImageOnDelay(row, i);
        i += 3000;
      }
      return res.send(200);
    });
  });

  app.listen(process.env.PORT || 3000);

}).call(this);
